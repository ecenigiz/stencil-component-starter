/**
 Stencil Browser Compiler - stencil-browser.js v0.0.0-dev.20191029021807
 MIT Licensed, https://stenciljs.com
*/
const buildEvents = () => {
    const evCallbacks = [];
    const off = (callback) => {
        const index = evCallbacks.findIndex(ev => ev.callback === callback);
        if (index > -1) {
            evCallbacks.splice(index, 1);
            return true;
        }
        return false;
    };
    const on = (arg0, arg1) => {
        if (typeof arg0 === 'function') {
            const eventName = null;
            const callback = arg0;
            evCallbacks.push({
                eventName,
                callback
            });
            return () => off(callback);
        }
        else if (typeof arg0 === 'string' && typeof arg1 === 'function') {
            const eventName = arg0.toLowerCase().trim();
            const callback = arg1;
            evCallbacks.push({
                eventName,
                callback
            });
            return () => off(callback);
        }
        return () => false;
    };
    const emit = (eventName, data) => {
        const normalizedEventName = eventName.toLowerCase().trim();
        for (const ev of evCallbacks) {
            if (ev.eventName == null) {
                try {
                    ev.callback(eventName, data);
                }
                catch (e) {
                    console.error(e);
                }
            }
            else if (ev.eventName === normalizedEventName) {
                try {
                    ev.callback(data);
                }
                catch (e) {
                    console.error(e);
                }
            }
        }
    };
    const unsubscribeAll = () => {
        evCallbacks.length = 0;
    };
    return {
        emit,
        on,
        unsubscribeAll
    };
};

const compilerBuild = {
    buildId: '20191029021807',
    vermoji: 'ðŸ’Ž',
    stencilVersion: '0.0.0-dev.20191029021807',
    rollupVersion: '1.24.0',
    terserVersion: '4.3.4',
    typescriptVersion: '3.6.3',
    minfyJsId: 'terser4.3.4_4',
    optimizeCssId: 'autoprefixer9.6.5_cssnano4.1.10_postcss7.0.18_4',
    transpilerId: 'typescript3.6.3_4'
};
const version = compilerBuild.stencilVersion;

const IS_NODE_ENV = (typeof global !== 'undefined' && typeof require === 'function' && !!global.process && Array.isArray(global.process.argv) && typeof __filename === 'string' && (!global.origin || typeof global.origin !== 'string'));
const IS_WEB_WORKER_ENV = (typeof self !== 'undefined' && typeof self.importScripts === 'function' && typeof XMLHttpRequest !== 'undefined' && typeof location !== 'undefined' && typeof navigator !== 'undefined');
const requireFunc = (path) => (typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require)(path);

const normalizePath = (str) => {
    // Convert Windows backslash paths to slash paths: foo\\bar âž” foo/bar
    // https://github.com/sindresorhus/slash MIT
    // By Sindre Sorhus
    if (typeof str !== 'string') {
        throw new Error(`invalid path to normalize`);
    }
    str = str.trim();
    if (EXTENDED_PATH_REGEX.test(str) || NON_ASCII_REGEX.test(str)) {
        return str;
    }
    str = str.replace(SLASH_REGEX, '/');
    // always remove the trailing /
    // this makes our file cache look ups consistent
    if (str.charAt(str.length - 1) === '/') {
        const colonIndex = str.indexOf(':');
        if (colonIndex > -1) {
            if (colonIndex < str.length - 2) {
                str = str.substring(0, str.length - 1);
            }
        }
        else if (str.length > 1) {
            str = str.substring(0, str.length - 1);
        }
    }
    return str;
};
const EXTENDED_PATH_REGEX = /^\\\\\?\\/;
const NON_ASCII_REGEX = /[^\x00-\x80]+/;
const SLASH_REGEX = /\\/g;

const isString = (v) => typeof v === 'string';

const TASK_CANCELED_MSG = `task canceled`;

// 'path' module extracted from Node.js v8.11.1 (only the posix part)

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) ; else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

var pathBrowserify = posix;

const path = {};
if (IS_NODE_ENV) {
    const nodePath = requireFunc('path');
    Object.assign(path, nodePath);
    path.join = (...args) => normalizePath(nodePath.join.apply(nodePath, args));
    path.normalize = (...args) => normalizePath(nodePath.normalize.apply(nodePath, args));
    path.relative = (...args) => normalizePath(nodePath.relative.apply(nodePath, args));
    path.resolve = (...args) => normalizePath(nodePath.resolve.apply(nodePath, args));
}
else {
    Object.assign(path, pathBrowserify);
}

const getCompilerExecutingPath = () => {
    if (IS_NODE_ENV) {
        return __filename;
    }
    if (IS_WEB_WORKER_ENV) {
        return location.href;
    }
    try {
        return import.meta.url;
    }
    catch (e) { }
    throw new Error('unable to find executing path');
};

const createWebWorkerMainController = (maxConcurrentWorkers, events) => {
    let msgIds = 0;
    let isDestroyed = false;
    const tasks = new Map();
    const workers = [];
    const cpus = navigator.hardwareConcurrency || 1;
    const totalWorkers = Math.max(Math.min(maxConcurrentWorkers, cpus), 1);
    const onMessage = (ev) => {
        const msgFromWorker = ev.data;
        if (msgFromWorker && !isDestroyed) {
            if (isString(msgFromWorker.rtnEventName)) {
                events.emit(msgFromWorker.rtnEventName, msgFromWorker.rtnEventData);
            }
            else {
                const task = tasks.get(msgFromWorker.stencilId);
                if (task) {
                    tasks.delete(msgFromWorker.stencilId);
                    if (msgFromWorker.rtnError) {
                        task.reject(msgFromWorker.rtnError);
                    }
                    else {
                        task.resolve(msgFromWorker.rtnValue);
                    }
                }
                else if (msgFromWorker.rtnError) {
                    console.error(msgFromWorker.rtnError);
                }
            }
        }
    };
    const onError = (e) => console.error(e);
    const createWebWorkerMain = () => {
        const executingPath = getCompilerExecutingPath();
        const pathname = `./stencil.js?stencil-worker=${executingPath.includes('localhost') ? '' : version}`;
        const workerUrl = new URL(pathname, executingPath);
        const worker = new Worker(workerUrl, { name: `stencil@${version}` });
        worker.onerror = onError;
        worker.onmessage = onMessage;
        workers.push({
            worker,
            totalMsgs: 0,
        });
    };
    const send = (...args) => new Promise((resolve, reject) => {
        if (isDestroyed) {
            reject(TASK_CANCELED_MSG);
            return;
        }
        const msg = {
            stencilId: msgIds++,
            args,
        };
        tasks.set(msg.stencilId, {
            resolve,
            reject,
        });
        if (workers.length === 0) {
            // always need at least one already fired up
            createWebWorkerMain();
        }
        let theChoosenOne = null;
        for (const worker of workers) {
            if (theChoosenOne == null || worker.totalMsgs < theChoosenOne.totalMsgs) {
                theChoosenOne = worker;
            }
        }
        theChoosenOne.worker.postMessage(msg);
        theChoosenOne.totalMsgs++;
        if (workers.length < totalWorkers) {
            // warmup more we'll probably need soon
            createWebWorkerMain();
        }
    });
    const destroy = () => {
        isDestroyed = true;
        tasks.forEach(t => t.reject(TASK_CANCELED_MSG));
        tasks.clear();
        workers.forEach(w => w.worker.terminate());
        workers.length = 0;
    };
    return {
        send,
        destroy,
    };
};

const createWorkerMainContext = (workerCtrl, events) => {
    return {
        autoPrefixCss: (css) => workerCtrl.send('autoPrefixCss', css),
        build: () => workerCtrl.send('build'),
        compileModule: (code, opts) => workerCtrl.send('compileModule', code, opts),
        createWatcher: () => workerCtrl.send('createWatcher').then(() => ({
            start: () => workerCtrl.send('watcherStart'),
            close: () => workerCtrl.send('watcherClose'),
            on: events.on,
        })),
        destroy: () => workerCtrl.send('destroy').then(() => {
            workerCtrl.destroy();
        }),
        initCompiler: () => workerCtrl.send('initCompiler'),
        loadConfig: (config) => workerCtrl.send('loadConfig', config),
        minifyJs: (input, opts) => workerCtrl.send('minifyJs', input, opts),
        optimizeCss: (opts) => workerCtrl.send('optimizeCss', opts),
        scopeCss: (cssText, scopeId, commentOriginalSelector) => workerCtrl.send('scopeCss', cssText, scopeId, commentOriginalSelector),
        sysAccess: (p) => workerCtrl.send('sysAccess', p),
        sysMkdir: (p) => workerCtrl.send('sysMkdir', p),
        sysReadFile: (p) => workerCtrl.send('sysReadFile', p),
        sysReaddir: (p) => workerCtrl.send('sysReaddir', p),
        sysRmdir: (p) => workerCtrl.send('sysRmdir', p),
        sysStat: (p) => workerCtrl.send('sysStat', p),
        sysUnlink: (p) => workerCtrl.send('sysUnlink', p),
        sysWriteFile: (p, content) => workerCtrl.send('sysWriteFile', p, content),
        watcherClose: () => workerCtrl.send('watcherClose'),
        watcherStart: () => workerCtrl.send('watcherStart'),
    };
};

const createWorkerCompiler = async () => {
    // main thread that creates an interface to the worker thread
    // the worker thread is running the one compiler
    const events = buildEvents();
    const workerCtrl = createWebWorkerMainController(1, events);
    const worker = createWorkerMainContext(workerCtrl, events);
    await worker.initCompiler();
    return {
        build: worker.build,
        compileModule: worker.compileModule,
        createWatcher: worker.createWatcher,
        destroy: worker.destroy,
        loadConfig: worker.loadConfig,
        sys: {
            access: (p) => worker.sysAccess(p),
            mkdir: (p) => worker.sysMkdir(p),
            readFile: (p) => worker.sysReadFile(p),
            readdir: (p) => worker.sysReaddir(p),
            rmdir: (p) => worker.sysRmdir(p),
            stat: (p) => worker.sysStat(p),
            unlink: (p) => worker.sysUnlink(p),
            writeFile: (p, content) => worker.sysWriteFile(p, content),
        }
    };
};

const dependencies = [
    {
        name: 'typescript',
        version: compilerBuild.typescriptVersion,
        main: '/lib/typescript.js',
    },
    {
        name: 'rollup',
        version: compilerBuild.rollupVersion,
        main: '/dist/rollup.browser.es.js'
    },
    {
        name: 'terser',
        version: compilerBuild.terserVersion,
        main: '/dist/bundle.min.js'
    }
];

export { createWorkerCompiler, dependencies, version };
